{"version":3,"sources":["models/ActiveView.ts","pages/LoadingSpiner.tsx","components/QuizItem.tsx","pages/StartPage.tsx","pages/SummaryPage.tsx","components/Question.tsx","store/dataReducer.ts","scripts/math.ts","store/personality.api.middleware.ts","pages/QuizPage.tsx","components/Header/Header.tsx","App.tsx","serviceWorker.ts","store/pageViewReducer.ts","store/localStorage.ts","store/configureStore.ts","index.tsx","assets/logo.png"],"names":["ActiveViewEnum","LoadingSpinner","react_default","a","createElement","src","alt","QuizItem","props","react_router_dom","to","concat","permalink","Paper","name","img","className","process","connect","state","quizList","data","dispatch","onStart","type","_ref","React","useEffect","length","map","quiz","key","components_QuizItem","LoadingSpiner","result","results","scores","indexOf","Math","max","apply","Object","toConsumableArray","quizName","setFinishedQuiz","Card","title","Typography","variant","description","Button","react_router","currentQuestionId","pageView","activeQuestion","questionOrder","questions","activeQuizQuestion","isLast","onAnswer","payload","summary","question","answers","answer","onClick","values","dataState","dataReducer","arguments","undefined","action","objectSpread","randPrime","exclude","primes","rand","floor","random","fetchMdl","next","fetch","then","res","json","catch","e","console","log","_ref2","activeQuiz","startingNewQuiz","failedToLoadQuiz","currentQuestion","resetScores","getQuizData","getQuiz","match","params","classes","makeStyles","theme","root","flexGrow","margin","spacing","useStyles","BorderLinearProgress","withStyles","height","backgroundColor","lighten","bar","borderRadius","LinearProgress","quizProgress","color","value","src_components_Question","Header","AppBar","position","Toolbar","logo","exact","activeClassName","activeView","isQuizListLoaded","getData","createMuiTheme","palette","primary","main","ThemeProvider","components_Header_Header","Container","maxWidth","path","component","StartPage","QuizPage","SummaryPage","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","pageViewState","pageViewReducer","loadState","storedState","localStorage","getItem","JSON","parse","err","scoreState","scoreReducer","i","store","middlewareEnhancer","applyMiddleware","persistedState","rootReducer","combineReducers","createStore","configureStore","subscribe","throttle","stateToStore","stringify","setItem","_unused","saveState","getState","ReactDOM","render","es","src_App_0","document","getElementById","URL","href","origin","addEventListener","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f4cee180.chunk.js","sourcesContent":["export enum ActiveViewEnum {\r\n  start,\r\n  quiz,\r\n  summary,\r\n  create\r\n};\r\nexport default  ActiveViewEnum;","import React from 'react';\r\n\r\nconst LoadingSpinner: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={\"/loading.gif\"}  alt={'page loading please wait'}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingSpinner;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ninterface IProps {\r\n    name: string\r\n    permalink: string\r\n    img:string\r\n}\r\n\r\n\r\nconst QuizItem: React.FC<IProps> = (props) => {\r\n    return (\r\n            <Link to={`/quiz/${props.permalink}`}>\r\n                <div>\r\n                    <Paper>\r\n\r\n                        <h3>{props.name}</h3>\r\n                        {\r\n                            props.img&&\r\n                            <img className={\"Question-img\"} src={`${process.env.PUBLIC_URL}/img/${props.img}`} alt={'Quiz'}/>\r\n                        }\r\n\r\n                    </Paper>\r\n                </div>\r\n            </Link>\r\n    )\r\n};\r\n\r\nexport default QuizItem;\r\n","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport LoadingSpinner from './LoadingSpiner'\r\nimport QuizItem from \"../components/QuizItem\";\r\n\r\ninterface IProps {\r\n    onStart: any\r\n    quizList: [any]\r\n}\r\n\r\nconst StartPage: React.FC<IProps> = ({onStart, quizList}) => {\r\n    React.useEffect(() => {\r\n        onStart();\r\n    }, [onStart]);\r\n\r\n\r\n    if (quizList.length > 2) {\r\n        return (\r\n            <div>\r\n                <h1>Find Your True Self</h1>\r\n                <p>Select a quiz to start</p>\r\n                    {\r\n                        quizList.map((quiz, key) => (\r\n                            <QuizItem name={quiz.name} permalink={quiz.permalink} img={quiz.img} key={key}/>\r\n                        ))\r\n                    }\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n    return <LoadingSpinner/>;\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        quizList: state.data.quizList\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onStart: () => {\r\n        dispatch({type: 'RESET_VIEW'});\r\n        dispatch({type: 'CLEAR_QUIZ'});\r\n    }\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport './SummaryPage.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\ninterface IProps {\r\n    result: any\r\n    quizName: string\r\n    setFinishedQuiz: () => void\r\n}\r\n\r\nconst SummaryPage: React.FC<IProps> = ({result, setFinishedQuiz, quizName}) => {\r\n    React.useEffect(() => {\r\n        setFinishedQuiz();\r\n    }, [setFinishedQuiz]);\r\n    if (!result) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{quizName}</h1>\r\n            <Card>\r\n                <Card className={\"Summary-topCard\"}>\r\n                    <h1>{result.title}</h1>\r\n                    {\r\n                        result.img &&\r\n                        <img className={\"Question-img\"} src={`${process.env.PUBLIC_URL}/img/${result.img}`} alt={\"summary\"}/>\r\n                    }\r\n                </Card>\r\n                <Card className={\"Summary-bottomCard\"}>\r\n                    <Typography variant=\"body1\">\r\n                        <p>{result.description} </p>\r\n                    </Typography>\r\n                    <Link to={`/quiz/`}>\r\n                        <Button\r\n                            className={\"Summary-buttons\"}\r\n                            variant=\"outlined\">\r\n                            <h4>Go again</h4>\r\n                        </Button>\r\n                    </Link>\r\n                    <Link to={`/`}>\r\n                        <Button\r\n                            className={\"Summary-buttons\"}\r\n                            variant=\"outlined\">\r\n                            <h4>Checkout some others</h4>\r\n                        </Button>\r\n                    </Link>\r\n                </Card>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    if (!state.data.quiz) {\r\n        return {result: null};\r\n    }\r\n    return {\r\n        result: state.data.quiz.results[state.scores.results.indexOf(Math.max(...state.scores.results))],\r\n        quizName: state.data.quiz.quizName\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    setFinishedQuiz: () => {\r\n        dispatch({type: 'RESET_VIEW'});\r\n    }\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SummaryPage);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport ActiveViewEnum from \"../models/ActiveView\";\r\nimport {Redirect} from \"react-router\";\r\nimport Card from '@material-ui/core/Card';\r\nimport './Question.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ninterface IProps {\r\n    activeQuizQuestion: any\r\n    onAnswer: any\r\n    isLast: boolean\r\n}\r\n\r\n\r\nconst Question: React.FC<IProps> = ({activeQuizQuestion, onAnswer, isLast}) => {\r\n    if (isLast) {\r\n        return <Redirect to=\"/summary\"/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={\"Question-questionImg-Card\"}>\r\n                <h2 className={\"Question-question\"}>{activeQuizQuestion.question}</h2>\r\n                {\r\n                    activeQuizQuestion.img &&\r\n                    <img className={\"Question-img\"} src={`${process.env.PUBLIC_URL}/img/${activeQuizQuestion.img}`}  alt={'quiz'}/>\r\n                }\r\n            </Card>\r\n            <Card className={\"Question-answers-Card\"}>\r\n                {\r\n                    activeQuizQuestion.answers.map((answer:any, key:number) => (\r\n                        <Button\r\n                            key={key}\r\n                            className={\"Question-answer\"}\r\n                            variant=\"outlined\"\r\n                            onClick={() => {\r\n                                onAnswer(answer.values, isLast)\r\n                            }}\r\n                        >\r\n                            {answer.answer}\r\n                        </Button>\r\n                    ))\r\n                }\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const currentQuestionId = ((state.pageView.activeQuestion + 1) * state.pageView.questionOrder) % state.data.quiz.questions.length;\r\n    return {\r\n        activeQuizQuestion: state.data.quiz.questions[currentQuestionId],\r\n        isLast: state.pageView.activeQuestion === state.data.quiz.questions.length\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onAnswer: (payload: [number], isLast: boolean) => {\r\n        if (!isLast) {\r\n            (() => {\r\n                dispatch({type: 'ADD_SCORES', payload})\r\n            })();\r\n            dispatch({type: 'ADVANCE_QUESTION'});\r\n        } else {\r\n            (() => {\r\n                dispatch({type: 'ADD_SCORES', payload})\r\n            })();\r\n            dispatch({type: 'CHANGE_VIEW', payload: ActiveViewEnum.summary});\r\n        }\r\n    }\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\r\n","const PERSONALITY_SET_LIST = '[PERSONALITY] SET_LIST';\r\nconst PERSONALITY_SET_QUIZ = '[PERSONALITY] SET_QUIZ';\r\n\r\nexport const personalitySetList = (payload: any) => {\r\n    return {\r\n        type: PERSONALITY_SET_LIST,\r\n        payload\r\n    }\r\n};\r\n\r\nexport const personalitySetQuiz = (payload: any) => {\r\n    return {\r\n        type: PERSONALITY_SET_QUIZ,\r\n        payload\r\n    }\r\n};\r\n\r\nconst dataState = {\r\n    quizList: [{}],\r\n    quiz: null\r\n};\r\n\r\nconst dataReducer = (state = dataState, action: any) => {\r\n    switch (action.type) {\r\n        case PERSONALITY_SET_QUIZ:\r\n            return {\r\n                ...state,\r\n                quiz:action.payload\r\n            }\r\n        case PERSONALITY_SET_LIST:\r\n            return {\r\n                ...state,\r\n                quizList:[...action.payload]\r\n            }\r\n        case 'CLEAR_QUIZ':\r\n            return {\r\n                ...state,\r\n                quiz:null\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default dataReducer;\r\n","export const randPrime = (exclude: number =2) => {\r\n    const primes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\r\n    const rand =  Math.floor(Math.random()*24);\r\n    return (exclude!==primes[rand]?primes[rand]:primes[rand+1]);\r\n};","import {Dispatch, Middleware, MiddlewareAPI} from 'redux';\r\nimport {personalitySetList,personalitySetQuiz} from './dataReducer';\r\nimport {randPrime} from '../scripts/math';\r\n\r\nconst GET_LIST = '[PERSONALITY] GET_LIST';\r\nconst GET_QUIZ = '[PERSONALITY] GET_QUIZ';\r\n\r\nexport const getList = () =>{\r\n    return {\r\n        type: GET_LIST\r\n    }\r\n}\r\n\r\nexport const getQuiz = (permalink:string) =>{\r\n    return {\r\n        type: GET_QUIZ,\r\n        payload: permalink\r\n    }\r\n}\r\n\r\nconst getListFlow:Middleware = ({dispatch}: MiddlewareAPI) => (next: Dispatch) => action => {\r\n    if (action.type === GET_LIST) {\r\n        fetch(process.env.PUBLIC_URL + '/quizList.json')\r\n            .then(res => res.json())\r\n            .then((data: Array<any>) => {\r\n                dispatch(personalitySetList(data));\r\n            })\r\n            .catch((e) => {\r\n                console.log(\"Page Not Found\");\r\n            })\r\n    }\r\n    return next(action);\r\n};\r\n\r\nconst getQuizFlow:Middleware = ({dispatch}: MiddlewareAPI) => (next: Dispatch) => action => {\r\n    if (action.type === GET_QUIZ) {\r\n        fetch(process.env.PUBLIC_URL +'/quizes/'+ action.payload + '/quiz.json')\r\n            .then(res => res.json())\r\n            .then((data: any) => {\r\n                dispatch(personalitySetQuiz(data));\r\n                dispatch({type:'SET_QUESTION_ORDER',payload:randPrime(data.questions.length)});\r\n            })\r\n            .catch((e) => {\r\n                dispatch({type:'FAILED_LOADING_QUIZ'});\r\n            })\r\n    }\r\n    return next(action);\r\n};\r\n\r\n\r\nexport const fetchMdl = [getListFlow,getQuizFlow];\r\n\r\nexport default fetchMdl;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Question from \"../components/Question\";\r\nimport LoadingSpinner from './LoadingSpiner'\r\nimport {Dispatch} from \"redux\";\r\nimport {Redirect, RouteComponentProps} from 'react-router';\r\nimport {getQuiz} from \"../store/personality.api.middleware\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { lighten, makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\n\r\n\r\ninterface IProps {\r\n    activeQuiz: any\r\n    startingNewQuiz: boolean\r\n    resetScores: () => void\r\n    getQuizData: (permalink: string) => void\r\n    failedToLoadQuiz: boolean\r\n    currentQuestion:number\r\n    quiz:any\r\n}\r\n\r\ntype RParams = {\r\n    permalink: string\r\n};\r\n\r\nconst QuizPage: React.FC<IProps & RouteComponentProps<RParams>> = ({match, activeQuiz, startingNewQuiz, resetScores, getQuizData, failedToLoadQuiz,quiz,currentQuestion}) => {\r\n    React.useEffect(() => {\r\n        if (startingNewQuiz) {\r\n            if(match.params.permalink){\r\n                getQuizData(match.params.permalink);\r\n            }\r\n            resetScores();\r\n        }\r\n    }, [getQuizData,match.params.permalink,startingNewQuiz,resetScores]);\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        margin: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    const BorderLinearProgress = withStyles({\r\n        root: {\r\n            height: 10,\r\n            backgroundColor: lighten('#ff6c5c', 0.5),\r\n        },\r\n        bar: {\r\n            borderRadius: 20,\r\n            backgroundColor: '#ff6c5c',\r\n        },\r\n    })(LinearProgress);\r\n\r\n    if (failedToLoadQuiz) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n    if (activeQuiz) {\r\n        const quizProgress = currentQuestion/quiz.questions.length*100\r\n        return (\r\n            <div>\r\n                <h1>{activeQuiz.quizName}</h1>\r\n                <BorderLinearProgress\r\n                    className={classes.margin}\r\n                    variant=\"determinate\"\r\n                    color=\"secondary\"\r\n                    value={quizProgress}\r\n                />\r\n                <Card>\r\n                <Question/>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n    return <LoadingSpinner/>;\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        activeQuiz: state.data.quiz,\r\n        startingNewQuiz: state.pageView.activeQuestion === 0,\r\n        failedToLoadQuiz: state.pageView.failedToLoadQuiz,\r\n        quiz:state.data.quiz,\r\n        currentQuestion: state.pageView.activeQuestion\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    resetScores: () => {\r\n        dispatch({type: 'RESET_SCORES'});\r\n    },\r\n    getQuizData: (permalink: string) => dispatch(getQuiz(permalink))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizPage);\r\n","import React from 'react';\r\nimport {AppBar, Toolbar, Typography,Button} from '@material-ui/core';\r\nimport logo from '../../assets/logo.png';\r\nimport {NavLink} from 'react-router-dom';\r\nimport \"./Header.css\";\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <header>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <div className={\"navBar\"}>\r\n                        <NavLink exact to=\"/\" className=\"nav-link\" activeClassName=\"nav-link-active\">\r\n                            <Button variant=\"contained\" color=\"secondary\" className={\"navBar-Button\"}>\r\n                            <Typography variant=\"h6\" className=\"mx-3 cursor-pointer\">\r\n                                Start New Quiz\r\n                            </Typography>\r\n                            </Button>\r\n                        </NavLink>\r\n                        <NavLink exact to=\"/summary\" className=\"nav-link\" activeClassName=\"nav-link-active\">\r\n                            <Button variant=\"contained\" color=\"secondary\" className={\"navBar-Button\"}>\r\n                            <Typography variant=\"h6\" className=\"mx-3 cursor-pointer\">\r\n                                Finish Now\r\n                            </Typography>\r\n                        </Button>\r\n                        </NavLink>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport {ActiveViewEnum} from './models/ActiveView';\nimport StartPage from './pages/StartPage';\nimport SummaryPage from './pages/SummaryPage';\nimport QuizPage from './pages/QuizPage';\nimport Header from './components/Header/Header';\nimport {Route, Switch} from \"react-router-dom\";\nimport {createMuiTheme} from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/styles';\nimport Container from \"@material-ui/core/Container\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {getList} from './store/personality.api.middleware';\n\n\n\ninterface IProp {\n    activeView: ActiveViewEnum\n    isQuizListLoaded: boolean\n    getData: any\n}\n\nconst App: React.FC<IProp> = ({activeView, getData, isQuizListLoaded}) => {\n    React.useEffect(() => {\n        getData();\n    }, [getData]);\n\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main: '#C1A600'\n            }\n        },\n    });\n\n    // get active page: start / quiz / summary / Create\n    const getActiveView = (): JSX.Element | undefined => {\n     return(\n        <Switch>\n            <Route exact path=\"/\" component={StartPage}/>\n            <Route\n                path=\"/start\"\n                component={StartPage}\n            />\n            <Route\n                path=\"/quiz/:permalink\"\n                component={QuizPage}\n            />\n            <Route\n                path=\"/quiz\"\n                component={QuizPage}\n            />\n            <Route\n                path=\"/summary\"\n                component={SummaryPage}\n            />\n        </Switch>\n    );\n};\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <Header/>\n                <Container maxWidth=\"sm\">\n                {getActiveView()}\n                </Container>\n            </div>\n        </ThemeProvider>\n    );\n};\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        activeView: state.pageView.activeView,\n        isQuizListLoaded: (state.data.quizList.length > 2)\n    }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getData: () => dispatch(getList())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","interface Action {\r\n    type: string;\r\n    payload: any;\r\n}\r\n\r\nconst pageViewState = {\r\n    activeQuestion: 0,\r\n    questionOrder: 1,\r\n    failedToLoadQuiz: false\r\n};\r\n\r\nconst pageViewReducer = (state = pageViewState, action: Action) => {\r\n    switch (action.type) {\r\n        case 'SET_QUESTION_ORDER':\r\n            return {\r\n                ...state,\r\n                questionOrder: action.payload\r\n            };\r\n\r\n        case 'ADVANCE_QUESTION':\r\n            return {\r\n                ...state,\r\n                activeQuestion: state.activeQuestion + 1\r\n            };\r\n\r\n        case 'CHANGE_VIEW':\r\n            return {\r\n                ...state,\r\n                activeView: action.payload,\r\n                activeQuestion: 0\r\n            };\r\n\r\n        case 'RESET_VIEW':\r\n            return {\r\n                ...pageViewState\r\n            }\r\n\r\n        case 'FAILED_LOADING_QUIZ':\r\n            return {\r\n                ...state,\r\n                failedToLoadQuiz: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default pageViewReducer;","export const loadState = () => {\r\n    try {\r\n        const storedState = localStorage.getItem('state');\r\n        if (storedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(storedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state:any) => {\r\n    try {\r\n        const stateToStore = JSON.stringify(state);\r\n        localStorage.setItem('state', stateToStore);\r\n    } catch {\r\n        console.log('unable to save to local storage.');\r\n    }\r\n};","import { combineReducers, createStore,applyMiddleware} from 'redux';\r\nimport dataReducer from './dataReducer';\r\nimport pageViewReducer from './pageViewReducer';\r\nimport fetchMdl from './personality.api.middleware';\r\nimport {loadState} from './localStorage';\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: any;\r\n}\r\n\r\nconst scoreState = {\r\n  results : [0,0,0,0]\r\n};\r\n\r\nconst scoreReducer = (state=scoreState, action: Action) => {\r\n  switch (action.type) {\r\n    case 'ADD_SCORES':\r\n      return {\r\n        ...state,\r\n        results : state.results.map((a, i) => a + action.payload[i])\r\n      }\r\n    case 'RESET_SCORES':\r\n      return scoreState\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n\r\nexport default function configureStore() {\r\n  const middlewareEnhancer = applyMiddleware(...fetchMdl);\r\n  const persistedState = loadState();\r\n  // combine all reducers to create  root reducer\r\n  const rootReducer = combineReducers({\r\n    scores: scoreReducer,\r\n    data: dataReducer,\r\n    pageView: pageViewReducer\r\n  });\r\n\r\n  return createStore(rootReducer,persistedState,middlewareEnhancer);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\nimport {saveState} from './store/localStorage';\nimport throttle from 'lodash/throttle';\n\n\nconst store = configureStore();\n\nstore.subscribe(throttle(()=>{\n    saveState(store.getState());\n},1500));\n\nif (window.location.hostname.indexOf('localhost') > -1) {\n    // @ts-ignore\n    window['store'] = store;\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.d3e32553.png\";"],"sourceRoot":""}